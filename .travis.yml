language: generic
dist: focal
arch: amd64

# Travis-ci bugs prevent completion. A workaround is to disable secret filtering
# In early 2018 said they are working on fixing their filter script, and in 10/2019
# they were still working on it.
filter_secrets: false

_aliases:
  - &docker
    os: linux
    services: docker
    before_script:
      - docker pull souffle/ubuntu:focal-base
      - docker run -d -t --name souf -w /souffle --mount src="$(pwd)",target=/souffle,type=bind souffle/ubuntu:focal-base /bin/sh
    after_script: docker container stop souf
    after_failure: docker exec souf /bin/sh -c ".travis/after_failure.sh"
  - &osxgcc
    os: osx
    osx_image: xcode11.2
    compiler: gcc
    install: ". .travis/osx/install_withgcc.sh"
    before_script: ".travis/init_test.sh"
    script: ".travis/run_test.sh"
    after_failure: ".travis/after_failure.sh"
    cache:
      directories: $HOME/Library/Caches/Homebrew
  - &osxclang
    <<: *osxgcc
    install: ". .travis/osx/install.sh"
    compiler: clang
    language: cpp

stages:
  - Warmup
  - Testing
  - Packaging

jobs:
  allow_failures:
    - name: "Debian arm64 package"
  fast_finish: true
  include:
# Style check stage
  - stage: Warmup
    name: "Style check"
    <<: *docker
    script: docker exec souf /bin/sh -c ".travis/run_test_format.sh"
  - stage: Warmup
    name: "Build Bionic g++"
    <<: *docker
    workspaces:
      create:
        name: focal_gcc
        paths: .
    script: docker exec souf /bin/sh -c "export CXX=g++ && .travis/init_test.sh '--enable-swig'"
  - stage: Warmup
    name: "Build Bionic g++ 64bit"
    <<: *docker
    workspaces:
      create:
        name: focal_gcc_64
        paths: .
    script: docker exec souf /bin/sh -c "export CXX=g++ && .travis/init_test.sh '--enable-swig --enable-64bit-domain'"
  - stage: Warmup
    name: "Build Bionic clang++"
    <<: *docker
    workspaces :
      create:
        name: focal_clang
        paths: .
    script: docker exec souf /bin/sh -c "export CXX=g++ && .travis/init_test.sh '--enable-swig'"

# Testing stage without Evaluation tests nor OpenMP (,-c)
  - stage: Testing
    <<: *osxclang
    name: "OSX clang non-eval without OMP"
    env:
    - SOUFFLE_CATEGORY=Unit,Syntactic,Semantic,Interface,Profile SOUFFLE_CONFS=",-c"
  - stage: Testing
    name: "Linux clang non-eval without OMP"
    <<: *docker
    env:
    - SOUFFLE_CATEGORY=Unit,Interface,Profile,Provenance SOUFFLE_CONFS=",-c"
    script:
      - docker exec souf /bin/sh -c ".travis/init_test.sh '--disable-openmp'"
      - docker exec -e SOUFFLE_CATEGORY -e SOUFFLE_CONFS souf /bin/sh -c ".travis/run_test.sh"

# Testing stage without Evaluation tests (-j8,-c -j8)
  - stage: Testing
    <<: *osxgcc
    name: "OSX gcc non-eval"
    env:
    - SOUFFLE_CATEGORY=Unit,Syntactic,Semantic,Interface,Profile SOUFFLE_CONFS="-j8,-c -j8"
  - stage: Testing
    name: "Linux clang non-eval"
    <<: *docker
    workspaces:
      use: focal_clang
    env:
    - SOUFFLE_CATEGORY=Unit,Syntactic,Semantic,Interface,Profile SOUFFLE_CONFS="-j8,-c -j8"
    script: docker exec -e SOUFFLE_CATEGORY -e SOUFFLE_CONFS souf /bin/sh -c ".travis/run_test.sh"
  - stage: Testing
    name: "Linux gcc non-eval"
    <<: *docker
    workspaces:
      use: focal_gcc
    env:
    - SOUFFLE_CATEGORY=Unit,Syntactic,Semantic,Interface,Profile SOUFFLE_CONFS="-j8,-c -j8"
    script: docker exec -e SOUFFLE_CATEGORY -e SOUFFLE_CONFS souf /bin/sh -c ".travis/run_test.sh"

# Testing stage for Evaluation tests without OpenMP (,-c)
  - stage: Testing
    <<: *osxclang
    name: "OSX clang fast evaluation tests without OMP"
    before_script: ".travis/init_test.sh --enable-swig"
    env:
    - SOUFFLE_CATEGORY=Swig,FastEvaluation SOUFFLE_CONFS=",-c"

# Testing stage for Evaluation tests (-j8,-c -j8)
  - stage: Testing
    name: "Linux gcc fast evaluation tests"
    <<: *docker
    workspaces:
      use: focal_gcc
    env:
    - SOUFFLE_CATEGORY=Swig,FastEvaluation SOUFFLE_CONFS="-j8,-c -j8"
    script: docker exec -e SOUFFLE_CATEGORY -e SOUFFLE_CONFS souf /bin/sh -c ".travis/run_test.sh"
  - stage: Testing
    name: "Linux clang fast evaluation tests"
    <<: *docker
    workspaces:
      use: focal_clang
    env:
    - SOUFFLE_CATEGORY=Swig,FastEvaluation SOUFFLE_CONFS="-j8,-c -j8"
    script: docker exec -e SOUFFLE_CATEGORY -e SOUFFLE_CONFS souf /bin/sh -c ".travis/run_test.sh"

# Testing stage with 64bit RamDomains (-j8,-c -j8)
  - stage: Testing
    name: "Linux gcc 64-bit non-eval"
    <<: *docker
    workspaces:
      use: focal_gcc_64
    env:
    - SOUFFLE_CATEGORY=Unit,Syntactic,Semantic,Interface,Profile SOUFFLE_CONFS="-j8,-c -j8"
    script:
      - docker exec -e SOUFFLE_CATEGORY -e SOUFFLE_CONFS souf /bin/sh -c ".travis/run_test.sh"
  - stage: Testing
    name: "Linux gcc 64-bit provenance"
    <<: *docker
    workspaces:
      use: focal_gcc_64
    env:
    - SOUFFLE_CATEGORY=Provenance SOUFFLE_CONFS=",-c"
    script:
      - docker exec -e SOUFFLE_CATEGORY -e SOUFFLE_CONFS souf /bin/sh -c ".travis/run_test.sh"
  - stage: Testing
    name: "Linux gcc 64-bit fast evaluation tests"
    <<: *docker
    workspaces:
      use: focal_gcc_64
    env:
    - SOUFFLE_CATEGORY=FastEvaluation SOUFFLE_CONFS="-j8,-c -j8"
    script:
      - docker exec -e SOUFFLE_CATEGORY -e SOUFFLE_CONFS souf /bin/sh -c ".travis/run_test.sh"

# Packaging stage
# These both test if packaging works, and if run on the master branch, deploy the resulting packages.
  # Test make install installs a working souffle.
  - stage: Packaging
    name: "Debian make install"
    <<: *docker
    workspaces:
      use: focal_gcc
    script: docker exec souf /bin/sh -c ".travis/test_make_install.sh"
  # Make the linux deb packages and if successful upload to github releases and bintray
  # All PRs go to bintray unstable, tagged releases to bintray stable
  - stage: Packaging
    name: "Debian amd64 package"
    <<: *docker
    script:
      - docker exec souf /bin/sh -c ".travis/linux/install_debian_deps.sh"
      - docker exec souf /bin/sh -c ".travis/linux/make_debian_package.sh"
    before_deploy:
      - .travis/bintray_json.sh debian
    # deploy to bintray if we're in the souffle-lang repo
    # https://docs.travis-ci.com/user/deployment/bintray
    deploy:
      - provider: bintray
        skip_cleanup: true
        file: bintray-deb-unstable.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          branch: master
          repo: souffle-lang/souffle
      - provider: bintray
        skip_cleanup: true
        file: bintray-deb-stable.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          repo: souffle-lang/souffle
          tags: true
      - provider: releases
        skip_cleanup: true
        token: $GHRELEASES_TOKEN
        file_glob: true
        file: deploy/*
        on:
          repo: souffle-lang/souffle
          tags: true
  - stage: Packaging
    name: "Debian arm64 package"
    arch: arm64
    <<: *docker
    script:
      - docker exec souf /bin/sh -c ".travis/linux/install_debian_deps.sh"
      - docker exec souf /bin/sh -c ".travis/linux/make_debian_package.sh 2"
    before_deploy:
      - .travis/bintray_json.sh debian arm64
    # deploy to bintray if we're in the souffle-lang repo
    # https://docs.travis-ci.com/user/deployment/bintray
    deploy:
      - provider: bintray
        skip_cleanup: true
        file: bintray-deb-unstable.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          branch: master
          repo: souffle-lang/souffle
      - provider: bintray
        skip_cleanup: true
        file: bintray-deb-stable.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          repo: souffle-lang/souffle
          tags: true
  # Make the centos rpm packages and if successful upload to bintray
  # All PRs go to bintray unstable, tagged releases to bintray stable
  # Try to build in a raw centos container to test that our dependencies are correct
  - stage: Packaging
    name: "CentOS package"
    <<: *docker
    before_script: docker pull centos:8
    script: docker run --mount src="$(pwd)",target=/souffle,type=bind centos:8 /bin/sh -c "cd /souffle && .travis/linux/install_centos_deps.sh && .travis/linux/make_centos_package.sh"
    before_deploy:
      - .travis/bintray_json.sh centos
    # deploy to bintray if we're in the souffle-lang repo
    # https://docs.travis-ci.com/user/deployment/bintray
    deploy:
      - provider: bintray
        skip_cleanup: true
        file: bintray-rpm-unstable.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          branch: master
          repo: souffle-lang/souffle
      - provider: bintray
        skip_cleanup: true
        file: bintray-rpm-stable.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          repo: souffle-lang/souffle
          tags: true

  # Make the fedora rpm packages and if successful upload to bintray
  # All PRs go to bintray unstable, tagged releases to bintray stable
  # Try to build in a raw fedora container to test that our dependencies are correct
  - stage: Packaging
    name: "Fedora package"
    <<: *docker
    before_script: docker pull fedora:27
    script: docker run --mount src="$(pwd)",target=/souffle,type=bind fedora:27 /bin/sh -c "cd /souffle && .travis/linux/install_fedora_deps.sh && .travis/linux/make_fedora_package.sh"
    before_deploy:
      - .travis/bintray_json.sh fedora
    # deploy to bintray if we're in the souffle-lang repo
    # https://docs.travis-ci.com/user/deployment/bintray
    deploy:
      - provider: bintray
        skip_cleanup: true
        file: bintray-rpm-unstable.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          branch: master
          repo: souffle-lang/souffle
      - provider: bintray
        skip_cleanup: true
        file: bintray-rpm-stable.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          repo: souffle-lang/souffle
          tags: true
  # Make the OSX packages and if successful upload to github releases.
  - stage: Packaging
    name: "OSX package"
    <<: *osxclang
    script: ".travis/osx/make_package.sh"
    before_deploy: .travis/bintray_json.sh osx
    deploy:
      - provider: releases
        skip_cleanup: true
        token: $GHRELEASES_TOKEN
        file_glob: true
        file: deploy/*
        on:
          repo: souffle-lang/souffle
          tags: true
      - provider: bintray
        skip_cleanup: true
        file: bintray-osx.json
        user: souffle-lang
        key: $BINTRAY_KEY
        on:
          tags: true
          repo: souffle-lang/souffle
      - provider: script
        skip_cleanup: true
        script: ".travis/osx/brew.sh $HOMEBREW_SOUFFLE_KEY"
        on:
          tags: true
          repo: souffle-lang/souffle
  # Generate doxygen html
  - stage: Packaging
    name: "Documenting"
    <<: *docker
    workspaces:
      use: focal_gcc
    script: docker run --mount src="$(pwd)",target=/souffle,type=bind souffle/ubuntu:focal-base /bin/sh -c "cd /souffle && make doxygen-doc"
    # update the gh-pages branch with doxygen output if the required github token has been set
    # https://pages.github.com/
    deploy:
      provider: pages
      skip_cleanup: true
      token: $GHPAGES_TOKEN
      keep_history: false
      local_dir: doc/html
      on:
        branch: master
        condition: -n $GHPAGES_TOKEN
